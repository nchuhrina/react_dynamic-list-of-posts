{"version":3,"sources":["helper/api.ts","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","App","useState","posts","setPost","isLoading","setIsLoading","qery","setQery","filterQuery","setFilterQuery","setFilterQueryDebounce","debounce","handleLoadClick","a","postsFromServer","usersFromServer","commentsFromServer","fullPost","map","post","comments","filter","comment","postId","id","user","find","userId","length","type","onClick","disabled","className","value","onChange","event","target","title","includes","body","postsFromFiler","key","name","c","href","email","ReactDOM","render","document","getElementById"],"mappings":"0RAwBMA,EAAS,SAAIC,GACjB,OAAOC,MAzBO,uCAyBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,iBCmDhBC,G,MApEH,WAAO,IAAD,EACSC,mBAAiB,IAD1B,mBACTC,EADS,KACFC,EADE,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGQJ,mBAAS,IAHjB,mBAGTK,EAHS,KAGHC,EAHG,OAIsBN,mBAAS,IAJ/B,mBAITO,EAJS,KAIIC,EAJJ,KAKZC,EAAyBC,IAASF,EAAgB,KAEhDG,EAAe,uCAAG,kCAAAC,EAAA,6DACtBR,GAAa,GADS,SDcIX,EAAa,UCdjB,cAGhBoB,EAHgB,gBDaIpB,EAAa,UCbjB,cAIhBqB,EAJgB,gBDeOrB,EAAgB,aCfvB,OAKhBsB,EALgB,OAOhBC,EAAWH,EAAgBI,KAAI,SAAAC,GAAI,kCACpCA,GADoC,IAEvCC,SAAUJ,EAAmBK,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWJ,EAAKK,MACvEC,KAAMV,EAAgBW,MAAK,SAAAD,GAAI,OAAIA,EAAKD,KAAOL,EAAKQ,eAItDxB,EAAQc,GAdc,4CAAH,qDAiBrB,OACE,oCACA,6BACE,qDAEkB,IAAjBf,EAAM0B,OACL,4BAAQC,KAAK,SAASC,QAASlB,EAAiBmB,SAAU3B,GACvDA,EAAY,aAAe,QAG9B,oCACA,2BACE4B,UAAW,SACXH,KAAK,OACLI,MAAO3B,EACP4B,SAAU,SAACC,GAAW5B,EAAQ4B,EAAMC,OAAOH,OACzCvB,EAAuByB,EAAMC,OAAOH,UAGxC,yBAAKD,UAAU,kBA/CA,SAAC9B,EAAeI,GACrC,OAAOJ,EAAMmB,QAAQ,SAAAF,GAAI,OAAIA,EAAKkB,MAAMC,SAAShC,IAASa,EAAKoB,KAAKD,SAAShC,MA+CpEkC,CAAetC,EAAOM,GAAaU,KAAI,SAAAC,GAAI,eAC1C,yBAAMa,UAAU,OAAOS,IAAKtB,EAAKK,IAC/B,wBAAIQ,UAAU,cAAcb,EAAKkB,OACjC,uBAAGL,UAAU,kBAAb,UAA+Bb,EAAKM,YAApC,aAA+B,EAAWiB,MAC1C,uBAAGV,UAAU,aAAab,EAAKoB,MAC/B,wBAAIP,UAAU,qBAAd,UACGb,EAAKC,gBADR,aACG,EAAeF,KAAI,SAAAyB,GAAC,OACrB,wBAAIX,UAAU,WACZ,wBAAIA,UAAU,gBAAgBW,EAAED,MAChC,uBAAGE,KAAI,iBAAYD,EAAEE,OAASb,UAAU,iBAAiBW,EAAEE,OAC3D,uBAAGb,UAAU,gBAAgBW,EAAEJ,qBC1DjDO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.bf91b4a1.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport interface Comment {\r\n  id: number;\r\n  name: string;\r\n  body: string;\r\n  postId: number;\r\n  email: string;\r\n}\r\n\r\nexport interface Post {\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n  userId: number;\r\n  user?: User;\r\n  comments?: Comment[];\r\n}\r\n\r\nconst getAll = <T>(url: string): Promise<T[]> => {\r\n  return fetch(API_URL + url)\r\n    .then(response => response.json());\r\n}\r\n\r\nexport const getUsers = () => getAll<User>('/users');\r\nexport const getPosts = () => getAll<Post>('/posts');\r\nexport const getComments = () => getAll<Comment>('/comments');\r\n","import React, { useState} from 'react';\r\nimport { getUsers, getPosts, Post, getComments } from './helper/api';\r\nimport debounce from 'lodash/debounce';\r\nimport './App.css';\r\n\r\nconst postsFromFiler = (posts: Post[], qery: string) =>{\r\n  return posts.filter( post => post.title.includes(qery) || post.body.includes(qery))\r\n}\r\n\r\nconst App = () => {\r\n  const [posts, setPost] = useState<Post[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [qery, setQery] = useState('');\r\n  const [filterQuery, setFilterQuery] = useState('');\r\nconst setFilterQueryDebounce = debounce(setFilterQuery, 1000)\r\n\r\n  const handleLoadClick = async () => {\r\n    setIsLoading(true);\r\n\r\n    const postsFromServer = await getPosts();\r\n    const usersFromServer = await getUsers();\r\n    const commentsFromServer = await getComments();\r\n\r\n    const fullPost = postsFromServer.map(post => ({\r\n      ...post,\r\n      comments: commentsFromServer.filter(comment => comment.postId === post.id),\r\n      user: usersFromServer.find(user => user.id === post.userId),\r\n\r\n    }));\r\n\r\n    setPost(fullPost);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <h1>Dynamic list of TODOs</h1>\r\n\r\n      {posts.length === 0 ? (\r\n        <button type=\"button\" onClick={handleLoadClick} disabled={isLoading}>\r\n          {isLoading ? 'Loading...' : 'Load'}\r\n        </button>\r\n      ) : (\r\n        <>\r\n        <input\r\n          className= \"search\"\r\n          type=\"text\"\r\n          value={qery}\r\n          onChange={(event) => {setQery(event.target.value);\r\n            setFilterQueryDebounce(event.target.value)}\r\n          }\r\n        />\r\n        <div className=\"post-container\">\r\n          {postsFromFiler(posts, filterQuery).map(post =>\r\n            <div  className=\"post\" key={post.id}>\r\n              <h2 className=\"post_title\">{post.title}</h2>\r\n              <p className=\"post_name_user\">{post.user?.name}</p>\r\n              <p className=\"post_body\">{post.body}</p>\r\n              <ul className=\"comment-container\">\r\n                {post.comments?.map(c =>\r\n                <li className=\"comment\">\r\n                  <h4 className=\"comment_name\">{c.name}</h4>\r\n                  <a href={`mailto:${c.email}`} className=\"comment_email\">{c.email}</a>\r\n                  <p className=\"comment_body\">{c.body}</p>\r\n                </li>)}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n        </>\r\n      )}\r\n    </div>\r\n\r\n      </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}