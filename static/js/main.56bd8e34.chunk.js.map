{"version":3,"sources":["helper/api.ts","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","App","useState","posts","setPosts","isLoading","setIsLoading","query","setQuery","filterQuery","setFilterQuery","handleLoadClick","a","postsFromServer","usersFromServer","commentsFromServer","fullPost","map","post","comments","filter","comment","postId","id","user","find","userId","setFilterQueryDebounce","useCallback","debounce","visibleTodos","useMemo","title","includes","body","postsFromFiler","length","type","onClick","disabled","className","value","onChange","target","key","name","email","href","ReactDOM","render","document","getElementById"],"mappings":"0RAwBMA,EAAU,SAAIC,GAClB,OAAOC,MAzBO,uCAyBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,iBCyDhBC,G,MA9EH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,OAIsBN,mBAAS,IAJ/B,mBAITO,EAJS,KAIIC,EAJJ,KAMVC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBN,GAAa,GADS,SDmBIX,EAAc,UCnBlB,cAGhBkB,EAHgB,gBDkBIlB,EAAc,UClBlB,cAIhBmB,EAJgB,gBDoBOnB,EAAiB,aCpBxB,OAKhBoB,EALgB,OAOhBC,EAAWH,EAAgBI,KAAI,SAAAC,GAAI,kCACpCA,GADoC,IAEvCC,SAAUJ,EAAmBK,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWJ,EAAKK,MACvEC,KAAMV,EAAgBW,MAAK,SAAAD,GAAI,OAAIA,EAAKD,KAAOL,EAAKQ,eAItDtB,EAASY,GAda,4CAAH,qDAiBfW,EAAyBC,sBAC7BC,IAASnB,EAAgB,KACzB,IAGIoB,EAAeC,mBAAQ,WAI3B,OAHuB,SAAC5B,EAAeI,GACrC,OAAOJ,EAAMiB,QAAQ,SAAAF,GAAI,OAAIA,EAAKc,MAAMC,SAAS1B,IAAUW,EAAKgB,KAAKD,SAAS1B,MAEzE4B,CAAehC,EAAOM,KAC3B,CAACN,EAAOM,IAEZ,OACE,6BACE,qDACkB,IAAjBN,EAAMiC,OACL,4BAAQC,KAAK,SAASC,QAAS3B,EAAiB4B,SAAUlC,GACvDA,EAAY,aAAe,QAG9B,oCACA,2BACEmC,UAAW,SACXH,KAAK,OACLI,MAAOlC,EACPmC,SAAU,YAAuB,IAAbD,EAAY,EAApBE,OAAQF,MAClBjC,EAASiC,GACTd,EAAuBc,MAI3B,yBAAKD,UAAU,kBACZV,EACEb,KAAI,gBAAEM,EAAF,EAAEA,GAAGC,EAAL,EAAKA,KAAKQ,EAAV,EAAUA,MAAME,EAAhB,EAAgBA,KAAKf,EAArB,EAAqBA,SAArB,OACL,yBAAMqB,UAAU,OAAOI,IAAKrB,GAC1B,wBAAIiB,UAAU,cAAcR,GAC5B,uBAAGQ,UAAU,kBAAb,OAA+BhB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAMqB,MACrC,uBAAGL,UAAU,aAAaN,GAC1B,wBAAIM,UAAU,qBAAd,OACGrB,QADH,IACGA,OADH,EACGA,EAAUF,KAAI,gBAAE4B,EAAF,EAAEA,KAAKC,EAAP,EAAOA,MAAMZ,EAAb,EAAaA,KAAb,OACf,wBAAIM,UAAU,WACZ,wBAAIA,UAAU,gBAAgBK,GAC9B,uBAAGE,KAAI,iBAAYD,GAASN,UAAU,iBAAiBM,GACvD,uBAAGN,UAAU,gBAAgBN,iBClE/Cc,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.56bd8e34.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Comment {\n  id: number;\n  name: string;\n  body: string;\n  postId: number;\n  email: string;\n}\n\nexport interface Post {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n  user?: User;\n  comments?: Comment[];\n}\n\nconst getData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nexport const getUsers = () => getData<User>('/users');\nexport const getPosts = () => getData<Post>('/posts');\nexport const getComments = () => getData<Comment>('/comments');\n","import React, {useState, useMemo, useCallback} from 'react';\nimport { getUsers, getPosts, Post, getComments } from './helper/api';\nimport debounce from 'lodash/debounce';\nimport './App.css';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    const postsFromServer = await getPosts();\n    const usersFromServer = await getUsers();\n    const commentsFromServer = await getComments();\n\n    const fullPost = postsFromServer.map(post => ({\n      ...post,\n      comments: commentsFromServer.filter(comment => comment.postId === post.id),\n      user: usersFromServer.find(user => user.id === post.userId),\n\n    }));\n\n    setPosts(fullPost);\n  };\n  \n  const setFilterQueryDebounce = useCallback(\n    debounce(setFilterQuery, 1000),\n    []\n    );\n\n  const visibleTodos = useMemo(() => {\n    const postsFromFiler = (posts: Post[], query: string) =>{\n      return posts.filter( post => post.title.includes(query) || post.body.includes(query))\n    }\n    return postsFromFiler(posts, filterQuery);\n   }, [posts, filterQuery]);\n\n  return (\n    <div>\n      <h1>Dynamic list of TODOs</h1>\n      {posts.length === 0 ? (\n        <button type=\"button\" onClick={handleLoadClick} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n        <input\n          className= \"search\"\n          type=\"text\"\n          value={query}\n          onChange={({target:{value}}) => {\n            setQuery(value);\n            setFilterQueryDebounce(value)\n          }\n          }\n        />\n        <div className=\"post-container\">\n          {visibleTodos\n            .map(({id,user,title,body,comments}) =>\n            <div  className=\"post\" key={id}>\n              <h2 className=\"post_title\">{title}</h2>\n              <p className=\"post_name_user\">{user?.name}</p>\n              <p className=\"post_body\">{body}</p>\n              <ul className=\"comment-container\">\n                {comments?.map(({name,email,body}) =>\n                <li className=\"comment\">\n                  <h4 className=\"comment_name\">{name}</h4>\n                  <a href={`mailto:${email}`} className=\"comment_email\">{email}</a>\n                  <p className=\"comment_body\">{body}</p>\n                </li>)}\n              </ul>\n            </div>\n          )}\n        </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}